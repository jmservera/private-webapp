name: Build and Deploy Container Images
permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - "src/frontend/**"
      - "src/backend/**"
  pull_request:
    branches: ["main"]
    paths:
      - "src/frontend/**"
      - "src/backend/**"

jobs:
  build-and-deploy-frontend:
    runs-on: self-hosted
    env:
      RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
      FRONTEND_APP_NAME: ${{ vars.FRONTEND_APP_NAME }}
      ACR_NAME: ${{ vars.ACR_NAME }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az login --identity

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_ENV

      - name: Build and Push Frontend Docker image
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            cd src/frontend
            # Build the image
            az acr build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest -r $ACR_NAME .

            # # Push to ACR using the az commands
            # az acr login --name $ACR_NAME
            # docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
            # docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest


      - name: Deploy Frontend Docker image
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az webapp config container set --name $FRONTEND_APP_NAME --resource-group $RESOURCE_GROUP \
              --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} \
              --docker-registry-server-url https://${{ env.ACR_LOGIN_SERVER }} --slot staging
            URL=$(az webapp deployment slot list --resource-group ${RESOURCE_GROUP} --name ${FRONTEND_APP_NAME} --query "[?name=='staging'].defaultHostName" -o tsv)
            URL="${URL}/health"
            timeout 300 bash -c "until [[ '$(curl -L -s -o /dev/null -w %{http_code} ${URL})' == '200' ]]; do sleep 5; echo -n .; done"
            az webapp deployment slot swap -s staging --target-slot production -n "${FRONTEND_APP_NAME}" --resource-group "${RESOURCE_GROUP}"

  build-and-deploy-backend:
    runs-on: self-hosted
    env:
      RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
      BACKEND_APP_NAME: ${{ vars.BACKEND_APP_NAME }}
      ACR_NAME: ${{ vars.ACR_NAME }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az login --identity

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_ENV

      - name: Build and Push Backend Docker image
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            cd src/backend
            # Build the image
            az acr build -t ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }} -t ${{ env.ACR_LOGIN_SERVER }}/backend:latest -r $ACR_NAME .

            # # Push to ACR using the az commands
            # az acr login --name $ACR_NAME
            # docker push ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}
            # docker push ${{ env.ACR_LOGIN_SERVER }}/backend:latest

      - name: Deploy Backend to Web App
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az webapp config container set --name $BACKEND_APP_NAME --resource-group $RESOURCE_GROUP \
              --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/backend:${{ github.sha }} \
              --docker-registry-server-url https://${{ env.ACR_LOGIN_SERVER }} --slot staging
            URL=$(az webapp deployment slot list --resource-group ${RESOURCE_GROUP} --name ${BACKEND_APP_NAME} --query "[?name=='staging'].defaultHostName" -o tsv)
            URL="${URL}/health"
            timeout 300 bash -c "until [[ '$(curl -L -s -o /dev/null -w %{http_code} ${URL})' == '200' ]]; do sleep 5; echo -n .; done"
            az webapp deployment slot swap -s staging --target-slot production -n "${BACKEND_APP_NAME}" --resource-group "${RESOURCE_GROUP}"
