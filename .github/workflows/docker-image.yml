name: Build and Deploy Container Images
permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - "src/frontend/**"
      - "src/backend/**"
  pull_request:
    branches: ["main"]
    paths:
      - "src/frontend/**"
      - "src/backend/**"

env:
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
  FRONTEND_APP_NAME: ${{ vars.FRONTEND_APP_NAME }}
  BACKEND_APP_NAME: ${{ vars.BACKEND_APP_NAME }}
  ACR_NAME: ${{ vars.ACR_NAME }}

jobs:
  compute_values:
    runs-on: self-hosted
    outputs:
      ACR_NAME: ${{ env.ACR_NAME }}
      FRONTEND_APP_NAME: ${{ env.FRONTEND_APP_NAME }}
      BACKEND_APP_NAME: ${{ env.BACKEND_APP_NAME }}
      RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
    steps:
      - name: Compute outputs
        run: |
          echo "ACR_NAME=${{ env.ACR_NAME }}" >> $GITHUB_OUTPUT
          echo "FRONTEND_APP_NAME=${{ env.FRONTEND_APP_NAME }}" >> $GITHUB_OUTPUT
          echo "BACKEND_APP_NAME=${{ env.BACKEND_APP_NAME }}" >> $GITHUB_OUTPUT
          echo "RESOURCE_GROUP=${{ env.RESOURCE_GROUP }}" >> $GITHUB_OUTPUT

  build-and-deploy:
    runs-on: self-hosted
    needs: compute_values
    strategy:
      matrix:
        APP_NAME: [{folder: frontend, app: "${{ needs.compute_values.outputs.FRONTEND_APP_NAME }}"}, { folder:backend, app: "${{ needs.compute_values.outputs.BACKEND_APP_NAME }}" }]
    env:
      RESOURCE_GROUP: ${{ needs.compute_values.outputs.RESOURCE_GROUP }}
      ACR_NAME: ${{ needs.compute_values.outputs.ACR_NAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Login with identity
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az login --identity

      - name: Get ACR login server
        uses: azure/cli@v2
        with:
          azcliversion: latest      
          inlineScript: |
            echo "ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_ENV

      - name: Build and Push Docker image
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            cd src/${{ matrix.APP_NAME.folder }}
            # Build the image
            az acr build -t ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.APP_NAME.folder }}:${{ github.sha }} -t ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.APP_NAME.folder }}:latest -r $ACR_NAME .
            az webapp restart --name ${{ matrix.APP_NAME }} --resource-group $RESOURCE_GROUP
            # # Push to ACR using the az commands
            # az acr login --name $ACR_NAME
            # docker push ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.APP_NAME.folder }}:${{ github.sha }}
            # docker push ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.APP_NAME.folder }}:latest


      - name: Deploy Docker image to Web App
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az webapp config container set --name ${{ matrix.APP_NAME.app }} --resource-group $RESOURCE_GROUP \
              --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.APP_NAME.folder }}:${{ github.sha }} \
              --docker-registry-server-url https://${{ env.ACR_LOGIN_SERVER }} --slot staging
            URL=$(az webapp deployment slot list --resource-group ${RESOURCE_GROUP} --name ${{ matrix.APP_NAME.app }} --query "[?name=='staging'].defaultHostName" -o tsv)
            URL="${URL}/health"
            az webapp restart --name ${{ matrix.APP_NAME.app }} --resource-group $RESOURCE_GROUP
            timeout 300 bash -c "until [[ '$(curl -L -s -o /dev/null -w %{http_code} ${URL})' == '200' ]]; do sleep 5; echo -n .; done"
            az webapp deployment slot swap -s staging --target-slot production -n "${{ matrix.APP_NAME.app }}" --resource-group "${RESOURCE_GROUP}"

